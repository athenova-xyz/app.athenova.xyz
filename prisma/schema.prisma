// Prisma schema
// Adjust datasource provider & url in .env

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // production: Postgres
  url      = env("DATABASE_URL")
}

// --------------------------------------------------
// User related enum & model
// Users authenticate via their walletAddress (unique)
// --------------------------------------------------

enum UserRole {
  CREATOR
  BACKER
  LEARNER
}

model User {
  id            String   @id @default(cuid())
  walletAddress String   @unique @db.VarChar(64) // store lowercased 0x-prefixed hex (EIP-55 checksum not preserved)
  role          UserRole @default(LEARNER)

  username    String? @unique @db.Citext // optional handle (case-insensitive)
  displayName String?
  email       String? @unique @db.Citext
  avatarUrl   String?
  bio         String?

  lastLoginAt DateTime?
  metadata    Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  courses Course[]

  @@index([role])
  @@index([createdAt])
}

// Nonce model for SIWE challenge flow
model Nonce {
  id        String    @id @default(cuid())
  hashed    String    @unique @db.Char(64)
  used      Boolean   @default(false)
  usedAt    DateTime?
  // expiry for the nonce
  expiresAt DateTime
  createdAt DateTime  @default(now())

  @@index([expiresAt])
}

// --------------------------------------------------
// Course model (for rich text editor autosave/publish)
// - content: last committed JSON document (BlockNote JSON)
// - draft: optional in-progress autosave buffer (not yet committed)
// - plainText: denormalized text for search/snippets
// --------------------------------------------------

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Course {
  id          String       @id @default(cuid())
  title       String       @db.VarChar(256)
  description String       @db.Text
  slug        String?      @unique @db.VarChar(256)
  authorId    String
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  status      CourseStatus @default(DRAFT)
  version     Int          @default(1)

  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([authorId])
  @@index([status])
  @@index([slug])
}
